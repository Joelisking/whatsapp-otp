version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - HMAC_SECRET=${HMAC_SECRET}
      - OTP_TTL_MINUTES=${OTP_TTL_MINUTES:-5}
      - MAX_OTP_ATTEMPTS=${MAX_OTP_ATTEMPTS:-5}
      - COOLDOWN_SECONDS=${COOLDOWN_SECONDS:-60}
      - WHATSAPP_PROVIDER=${WHATSAPP_PROVIDER:-meta}
      - META_ACCESS_TOKEN=${META_ACCESS_TOKEN}
      - META_PHONE_NUMBER_ID=${META_PHONE_NUMBER_ID}
      - META_API_VERSION=${META_API_VERSION:-v18.0}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_NUMBER=${TWILIO_FROM_NUMBER}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - RATE_LIMIT_MAX_REQUESTS_PER_PHONE=${RATE_LIMIT_MAX_REQUESTS_PER_PHONE:-5}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: whatsapp-otp-network